{
  "parser": "babel-eslint",
  "plugins": ["react"],
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "globals": {
    "require": true,
  },
  "ecmaFeatures": {
    "arrowFunctions": true,
    "binaryLiterals": true,
    "blockBindings": true,
    "classes": true,
    "destructuring": true,
    "forOf": true,
    "generators": true,
    "jsx": true,
    "modules": true,
    "objectLiteralComputerProperties": true,
    "objectLiteralDuplicateProperties": true,
    "objectLiteralShorthandMethods": true,
    "objectLiteralShorthandProperties": true,
    "octalLiterals": true,
    "regexUFlag": true,
    "regexYFlag": true,
    "restParams": true,
    "spread": true,
    "superInFunctions": true,
    "templateStrings": true,
    "unicodeCodePointEscapes": true,
    "experimentalObjectRestSpread": true
  },
  "rules": {
    // -----------------------------------------------------------------------
    // RECOMMENDED
    // -----------------------------------------------------------------------

    "comma-dangle": [2, "always-multiline"], // ......... Disallow or enforce trailing commas (recommended)
    "no-cond-assign": 2, // ............................. Disallow assignment in conditional expressions (recommended)
    "no-console": 0, // ................................. Disallow use of console in the node environment (recommended
    "no-constant-condition": 2, // ...................... Disallow use of constant expressions in conditions (recommended)
    "no-control-regex": 2, // ........................... Disallow control characters in regular expressions (recommended)
    "no-debugger": 2,  // ............................... Disallow use of debugger (recommended)
    "no-dupe-args": 2, // ............................... Disallow duplicate arguments in functions (recommended)
    "no-dupe-keys": 2, // ............................... Disallow duplicate keys when creating object literals (recommended)
    "no-duplicate-case": 2, // .......................... Disallow a duplicate case label. (recommended)
    "no-empty-character-class": 2, // ................... Disallow the use of empty character classes in regular expressions (recommended)
    "no-empty": 2, // ................................... Disallow empty statements (recommended)
    "no-ex-assign": 2, // ............................... Disallow assigning to the exception in a catch block (recommended)
    "no-extra-boolean-cast": 1, // ...................... Disallow double-negation boolean casts in a boolean context (recommended)
    "no-extra-parens": [2, "functions"], // ............. Disallow unnecessary parentheses
    "no-extra-semi": 2, // .............................. Disallow unnecessary semicolons (recommended) (fixable)
    "no-func-assign": 2, // ............................. Disallow overwriting functions written as function declarations (recommended)
    "no-inner-declarations": 2, // ...................... Disallow function or variable declarations in nested blocks (recommended)
    "no-invalid-regexp": 2, // .......................... Disallow invalid regular expression strings in the RegExp constructor (recommended)
    "no-irregular-whitespace": 2, // .................... Disallow irregular whitespace outside of strings and comments (recommended)
    "no-negated-in-lhs": 2, // .......................... Disallow negation of the left operand of an in expression (recommended)
    "no-obj-calls": 2, // ............................... Disallow the use of calling global Math & JSON objects as functions (recommended)
    "no-regex-spaces": 2, // ............................ Disallow multiple spaces in a regular expression literal (recommended)
    "no-sparse-arrays": 2, // ........................... Disallow sparse arrays (recommended)
    "no-unexpected-multiline": 2, // .................... Avoid code that looks like two expressions but is actually one
    "no-unreachable": 2, // ............................. Disallow unreachable statements after control-flow statements (recommended)
    "use-isnan": 2, // .................................. Disallow comparisons with the value NaN (recommended)
    "valid-jsdoc": [2, { // ............................. Ensure JSDoc comments are valid
      "requireParamDescription": false,
      "requireReturn": false,
      "requireReturnDescription": false
    }],
    "valid-typeof": 2, // ................................ Ensure that the results of typeof are compared against a valid string (recommended)

    // -----------------------------------------------------------------------
    // BEST PRACTICES
    // -----------------------------------------------------------------------

    "accessor-pairs": 1, // ............................. Enforces getter/setter pairs in objects
    "block-scoped-var": 1, // ........................... Treat var statements as if they were block scoped
    "complexity": ["error", 100], // .................... Specify the maximum cyclomatic complexity allowed in a program
    "consistent-return": 0, // .......................... Require return statements to either always or never specify values
    "curly": [0, "multi-line", "consistent"], // ........ Specify curly brace conventions for all control statements
    "default-case": 0, // ............................... Require default case in switch statements
    "dot-location": [2, "property"], // ................. Enforces consistent newlines before or after dots
    "dot-notation": 1, // ............................... Encourages use of dot notation whenever possible
    "eqeqeq": 2, // ..................................... Require the use of === and !== (fixable)
    "guard-for-in": 1, // ............................... Make sure for-in loops have an if statement
    "no-alert": 0, // ................................... Disallow the use of alert, confirm, and prompt
    "no-caller": 2, // .................................. Disallow use of arguments.caller or arguments.callee
    "no-case-declarations": 0, // ....................... Disallow lexical declarations in case clauses
    "no-div-regex": 1, // ............................... Disallow division operators explicitly at beginning of regular expression
    "no-else-return": 1, // ............................. Disallow else after a return in an if
    "no-labels": 1, // .................................. Disallow use of labels for anything other than loops and switches
    "no-empty-pattern": 1, // ........................... Disallow use of empty destructuring patterns
    "no-eq-null": 2, // ................................. Disallow comparisons to null without a type-checking operator
    "no-eval": 2, // .................................... Disallow use of eval()
    "no-extend-native": 1, // ........................... Disallow adding to native types
    "no-extra-bind": 1, // .............................. Disallow unnecessary function binding
    "no-fallthrough": 2, // ............................. Disallow fallthrough of case statements (recommended)
    "no-floating-decimal": 2, // ........................ Disallow the use of leading or trailing decimal points in numeric literals
    "no-implicit-coercion": [2, { // .................... Disallow the type conversions with shorter notations
      "boolean": false
    }],
    "no-implied-eval": 2,  // ........................... Disallow use of eval()-like methods
    "no-iterator": 1, // ................................ Disallow usage of __iterator__ property
    "no-lone-blocks": 2, // ............................. Disallow unnecessary nested blocks
    "no-loop-func": 1, // ............................... Disallow creation of functions within loops
    "no-magic-numbers": 0, // ........................... Disallow the use of magic numbers
    "no-multi-spaces": 1, // ............................ Disallow use of multiple spaces (fixable)
    "no-multi-str": 1, // ............................... Disallow use of multiline strings
    "no-native-reassign": 1, // ......................... Disallow reassignments of native objects
    "no-new-func": 1, // ................................ Disallow use of new operator for Function object
    "no-new-wrappers": 1, // ............................ Disallows creating new instances of String,Number, and Boolean
    "no-new": 1, // ..................................... Disallow use of the new operator when not part of an assignment or comparison
    "no-octal-escape": 1, // ............................ Disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    "no-octal": 1, // ................................... Disallow use of octal literals (recommended)
    "no-param-reassign": 0, // .......................... Disallow reassignment of function parameters
    "no-process-env": 1, // ............................. Disallow use of process.env
    "no-proto": 1, // ................................... Disallow usage of __proto__ property
    "no-redeclare": 2, // ............................... Disallow declaring the same variable more than once (recommended)
    "no-return-assign": 1, // ........................... Disallow use of assignment in return statement
    "no-script-url": 1, // .............................. Disallow use of javascript: urls
    "no-self-compare": 1, // ............................ Disallow comparisons where both sides are exactly the same
    "no-sequences": 1, // ............................... Disallow use of the comma operator
    "no-throw-literal": 1, // ........................... Restrict what can be thrown as an exception
    "no-unused-expressions": 1, // ...................... Disallow usage of expressions in statement position
    "no-useless-call": 1, // ............................ Disallow unnecessary .call() and .appply()
    "no-useless-concat": 1, // .......................... Disallow unnecessary concatenation of literals or template literals
    "no-void": 1, // .................................... Disallow use of the void operator
    "no-warning-comments": 0, // ........................ Disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    "no-with": 1, // .................................... Disallow use of the with statement
    "radix": 1, // ...................................... Require use of the second argument for parseInt()
    "vars-on-top": 1, // ................................ Require declaration of all vars at the top of their containing scope
    "wrap-iife": 1, // .................................. Require immediate function invocation to be wrapped in parentheses
    "yoda": 1, // ....................................... Require or disallow Yoda conditions

    // -----------------------------------------------------------------------
    // VARIABLES
    // -----------------------------------------------------------------------

    "init-declarations": 0, // .......................... Enforce or disallow variable initializations at definition
    "no-catch-shadow": 1, // ............................ Disallow the catch clause parameter name being the same as a variable in the outer scope
    "no-delete-var": 2, // .............................. Disallow deletion of variables (recommended)
    "no-label-var": 1, // ............................... Disallow labels that share a name with a variable
    "no-shadow-restricted-names": 1, // ................. Disallow shadowing of names such as arguments
    "no-shadow": [0, { // ............................... Disallow declaration of variables already declared in the outer scope
      "hoist": "never"
    }],
    "no-undef-init": 1, // .............................. Disallow use of undefined when initializing variables
    "no-undef": 1, // ................................... Disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    "no-undefined": 1, // ............................... Disallow use of undefined variable
    "no-unused-vars": [1, { // .......................... Disallow declaration of variables that are not used in the code (recommended)
      "varsIgnorePattern": "^React$"
    }],
    "no-use-before-define": [1, "nofunc"], // ........... Disallow use of variables before they are defined

    // -----------------------------------------------------------------------
    // NODE.JS & COMMON JS
    // -----------------------------------------------------------------------

    "no-mixed-requires": 0, // .......................... Disallow mixing regular variable and require declarations
    "no-new-require": 1, // ............................. Disallow use of new operator with the require function
    "no-path-concat": 1, // ............................. Disallow string concatenation with __dirname and __filename

    // -----------------------------------------------------------------------
    // STYLISTIC ISSUES
    // -----------------------------------------------------------------------

    "array-bracket-spacing": [0, "never"], // ........... Enforce spacing inside array brackets (fixable)
    "block-spacing": 1, // .............................. Disallow or enforce spaces inside of single line blocks (fixable)
    "brace-style": [1, "stroustrup", { // ............... Enforce one true brace style
        "allowSingleLine": true
    }],
    "camelcase": 0, // .................................. Require camel case names
    "comma-spacing": 1, // .............................. Enforce spacing before and after comma (fixable)
    "comma-style": 1, // ................................ Enforce one true comma style
    "computed-property-spacing": [2, "never"], // ....... Require or disallow padding inside computed properties (fixable)
    "consistent-this": [1, "self"], // .................. Enforce consistent naming when capturing the current execution context
    "eol-last": 1, // ................................... Enforce newline at the end of file, with no multiple empty lines (fixable)
    "func-names": 0, // ................................. Require function expressions to have a name
    "func-style": [1, "declaration", { // ............... Enforce use of function declarations or expressions
      "allowArrowFunctions": true
    }],
    "indent": [2, 2, { // ............................... Specify tab or space width for your code (fixable)
      "SwitchCase": 1,
      "VariableDeclarator": {
        "let": 2,
        "var": 2,
        "const": 3
      }
    }],
    "jsx-quotes": [1, "prefer-double"], // .............. Specify whether double or single quotes should be used in JSX attributes
    "key-spacing": 1, // ................................ Enforce spacing between keys and values in object literal properties
    "keyword-spacing": 1, // ............................ Enforce spacing before and after keywords
    "linebreak-style": 0, // ............................ Disallow mixed 'LF' and 'CRLF' as linebreaks
    "lines-around-comment": 0, // ....................... Enforce empty lines around comments
    "max-nested-callbacks": [1, 5], // .................. Specify the maximum depth callbacks can be nested
    "new-cap": [1, { // ................................. Require a capital letter for constructors
      "capIsNew": false
    }],
    "new-parens": 1, // ................................. Disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 1, // ....................... Disallow use of the Array constructor
    "no-continue": 1, // ................................ Disallow use of the continue statement
    "no-inline-comments": 0, // ......................... Disallow comments inline after code
    "no-lonely-if": 1, // ............................... Disallow if as the only statement in an else block
    "no-mixed-spaces-and-tabs": 2, // ................... Disallow mixed spaces and tabs for indentation (recommended)
    "no-multiple-empty-lines": [1, { // ................. Disallow multiple empty lines
      "max": 1,
      "maxEOF": 1
    }],
    "no-negated-condition": 1, // ....................... Disallow negated conditions with else statements
    "no-nested-ternary": 1, // .......................... Disallow nested ternary expressions
    "no-new-object": 1, // .............................. Disallow the use of the Object constructor
    "no-restricted-syntax": 0, // ....................... Disallow use of certain syntax in code
    "no-spaced-func": 1, // ............................. Disallow space between function identifier and application (fixable)
    "no-ternary": 0, // ................................. Disallow the use of ternary operators (I would LOVE to make this 1)
    "no-trailing-spaces": 1, // ......................... Disallow trailing whitespace at the end of lines (fixable)
    "no-underscore-dangle": 0, // ....................... Disallow dangling underscores in identifiers
    "no-unneeded-ternary": 1, // ........................ Disallow the use of ternary operators when a simpler alternative exists
    "object-curly-spacing": [2, "always"], // ........... Require or disallow padding inside curly braces (fixable)
    "one-var": [0, { // ................................. Require or disallow one variable declaration per function
      "var": "always",
      "let": "always",
      "const": "never"
    }],
    "operator-assignment": 0, // ........................ Require assignment operator shorthand where possible or prohibit it entirely
    "operator-linebreak": [1, "before"], // ............. Enforce operators to be placed before or after line breaks
    "padded-blocks": [1, "never"], // ................... Enforce padding within blocks
    "quote-props": [1, "consistent-as-needed"], // ...... Equire quotes around object literal property names
    "quotes": [0, "single"], // ......................... Specify whether backticks, double or single quotes should be used (fixable)
    "require-jsdoc": [0, { // ........................... Require JSDoc comment
      "require": {
        "FunctionDeclaration": true,
        "MethodDefinition": true
      }
    }],
    "semi": 1, // ....................................... Enforce spacing before and after semicolons
    "semi-spacing": 1, // ............................... Require or disallow use of semicolons instead of ASI (fixable)
    "sort-vars": 0, // .................................. Sort variables within the same declaration block
    "space-before-blocks": 1, // ........................ Require or disallow a space before blocks (fixable)
    "space-before-function-paren": 1, // ................ Require or disallow a space before function opening parenthesis (fixable)
    "space-in-parens": 1, // ............................ Require or disallow spaces inside parentheses
    "space-infix-ops": 0, // ............................ Require spaces around operators (fixable)
    "space-unary-ops": 1, // ............................ Require or disallow spaces before/after unary operators (fixable)
    "spaced-comment": [1, "always", { // ................ Require or disallow a space immediately following the // or /* in a comment
      "exceptions": ["/", "*", "-"],
      "markers": ["/", "*"]
    }],
    "wrap-regex": 1, // ................................. Require regex literals to be wrapped in parentheses

    // -----------------------------------------------------------------------
    // ES6
    // -----------------------------------------------------------------------

    "arrow-body-style": 0, // ........................... Require braces in arrow function body
    "arrow-parens": 0, // ............................... Require parens in arrow function arguments
    "arrow-spacing": 1, // .............................. Require space before/after arrow function's arrow (fixable)
    "constructor-super": 1, // .......................... Verify calls of super() in constructors
    "generator-star-spacing": [1, "before"], // ......... Enforce spacing around the * in generator functions (fixable)
    "no-confusing-arrow": 0, // ......................... Disallow arrow functions where a condition is expected
    "no-class-assign": 1, // ............................ Disallow modifying variables of class declarations
    "no-const-assign": 1, // ............................ Disallow modifying variables that are declared using const
    "no-dupe-class-members": 1, // ...................... Disallow duplicate name in class members
    "no-this-before-super": 1, // ....................... Disallow use of this/super before calling super() in constructors.
    "no-var": 0, // ..................................... Require let or const instead of var (Someday!)
    "object-shorthand": 1, // ........................... Require method and property shorthand syntax for object literals
    "prefer-const": 0,  // .............................. Suggest using const declaration for variables that are never modified after declared
    "prefer-reflect": 0, // ............................. Suggest using Reflect methods where applicable
    "prefer-spread": 1, // .............................. Suggest using the spread operator instead of .apply().
    "prefer-template": 0, // ............................ Suggest using template literals instead of strings concatenation
    "require-yield": 1, // .............................. Disallow generator functions that do not have yield

    // -----------------------------------------------------------------------
    // Legacy
    // -----------------------------------------------------------------------

    "no-plusplus": [0, { // ............................. Disallow use of unary operators, ++ and --
      "allowForLoopAfterthoughts": true
    }],

    // -----------------------------------------------------------------------
    // React
    // https://github.com/yannickcr/eslint-plugin-react#list-of-supported-rules
    // -----------------------------------------------------------------------

    "react/display-name": 2, // ......................... Prevent missing displayName in a React component definition
    "react/forbid-prop-types": 0, // .................... Forbid certain propTypes
    "react/no-danger": 0, // ............................ Prevent usage of dangerous JSX properties
    "react/no-deprecated": 2, // ........................ Prevent usage of deprecated methods
    "react/no-did-mount-set-state": 0, // ............... Prevent usage of setState in componentDidMount
    "react/no-did-update-set-state": 0, // .............. Prevent usage of setState in componentDidUpdate
    "react/no-direct-mutation-state": 2, // ............. Prevent direct mutation of this.state
    "react/no-is-mounted": 2, // ........................ Prevent usage of isMounted
    "react/no-set-state": 0, // ......................... Prevent usage of setState
    "react/no-string-refs": 0, // ....................... Prevent using string references in ref attribute.
    "react/no-unknown-property": 1, // .................. Prevent usage of unknown DOM property (fixable)
    "react/prefer-es6-class": [1, "always"], // ......... Enforce ES5 or ES6 class for React Components
    "react/prop-types": 0, // ........................... Prevent missing props validation in a React component definition
    "react/react-in-jsx-scope": 2, // ................... Prevent missing React when using JSX
    "react/self-closing-comp": 1, // .................... Prevent extra closing tags for components without children
    "react/sort-comp": [1, { // ............................ Enforce component methods order
      "order": [
        "static-variables",
        "instance-variables",
        "static-methods",
        "lifecycle",
        "/^handle.+$/",
        "/^on.+$/",
        "everything-else",
        "/^render.+$/",
        "render"
      ],
      "groups": {
        "lifecycle": [
          "constructor",
          "getChildContext",
          "componentWillMount",
          "componentDidMount",
          "componentWillReceiveProps",
          "shouldComponentUpdate",
          "componentWillUpdate",
          "componentDidUpdate",
          "componentWillUnmount"
        ]
      }
    }],
    "react/sort-prop-types": 1, // ...................... Enforce propTypes declarations alphabetical sorting

    // -----------------------------------------------------------------------
    // JSX
    // -----------------------------------------------------------------------

    "react/jsx-boolean-value": 2, // .................... Enforce boolean attributes notation in JSX
    "react/jsx-closing-bracket-location": [1, "after-props"],
    "react/jsx-curly-spacing": 1, // .................... Enforce or disallow spaces inside of curly braces in JSX attributes (fixable)
    "react/jsx-equals-spacing": 2, // ................... Enforce or disallow spaces around equal signs in JSX attributes
    "react/jsx-handler-names": 0, // .................... Enforce event handler naming conventions in JSX
    "react/jsx-indent-props": [2, 2], // ................ Validate props indentation in JSX
    "react/jsx-indent": [2, 2], // ...................... Validate JSX indentation
    "react/jsx-key": 2, // .............................. Validate JSX has key prop when in array or iterator
    "react/jsx-no-bind": [2, { // ....................... Prevent usage of .bind() and arrow functions in JSX props
      "ignoreRefs": true
    }],
    "react/jsx-no-duplicate-props": 2, // ............... Prevent duplicate props in JSX
    "react/jsx-no-literals": 0, // ...................... Prevent usage of unwrapped JSX strings
    "react/jsx-no-undef": 2, // ......................... Disallow undeclared variables in JSX
    "react/jsx-pascal-case": 2, // ...................... Enforce PascalCase for user-defined JSX components
    "react/jsx-sort-props": 0, // ....................... Enforce props alphabetical sorting
    "react/jsx-space-before-closing": 1, // ............. Validate spacing before closing bracket in JSX (fixable)
    "react/jsx-uses-react": 1, // ....................... Prevent React to be incorrectly marked as unused
    "react/jsx-uses-vars": 1 // ......................... Prevent variables used in JSX to be incorrectly marked as unused
  },
  "overrides": [
    {
      "files": [ "__tests__/**", "*.test.js", "*.test.jsx" ],
      "extends": [
        "plugin:jest/recommended"
      ],
      "globals": {
        "page": true,
        "browser": true,
        "context": true,
        "jestPuppeteer": true
      }
    }
  ]
}
